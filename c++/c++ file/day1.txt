Day 1:
Assignment: For C
loops
nested loops
function
array
string

C++
class complex and date
constants

=====================================================

==>C++ was invented by Bjarne Stroustrup in 1979 at Bell lab.
initially he called this lang as, c with classes,later in 1983 the name was changed to c++.

==>C++ is a general purpose/multipurpose,high level,compiler based and object oriented programming language.

==>C++ is a compiled language because it uses a compiler to translate the source code into an object code.
We are using compiler as a translator,thats why c++ is called as compiler based programming lang.

FAQ:
which s/w application we can create using c++?
==>using c++ , we can design operating system(dos,window,unix)
==>using c++,we can design editors(notepad,wordpad,editplus)
==>using c++,we can design commercial application(related to money like (bank program,hotel managment program,supermarket program)
==>using c++,we are also able to design database(oracle is designed by c and c++)
==>using c++,we can also design translators(compiler,interpreter)
==>using c++,we can design PC and mobile games. ex:snake game,mario etc.

==>The language was updated 5 major times in 2011, 2014, 2017, 2020, and 2023 to C++11, C++14, C++17, C++20, and C++23.

=========================================================
What is Function oriented programming Language / Procedural Language:

==>Total program is divided into small modules and each module is called as functions. Function is a block of statements which does some predefinedtask.Entire C program is collection of functions thats why c++ is called as function oriented programming lang.

Advantages of functions are:
1)Memory requirement is less:Functions reduce the number of statements in a program, which makes it smaller. 
2)Reusability:Write once use many times.Functions can be called multiple times from different parts of a program, reducing redundancy
3)Code readability: Functions make code easier to understand or read by breaking programs into smaller, more manageable modules. 

=============================================================================
PROBLEM WITH FUNCTION

1)procedural lang means globally all data stored at one place i.e  all data accessible to all function.So data is not secured because data is freely moving around the function.
2)when program is big and when data is global then to identify  which variable is accesed by which function  is 
very difficult. Any function can access it . 
3)In c programming lang, data and function is seperately stored  and global data is accessible to every function.
it is difficult to map real world entities into system design.it is difficult to bind data to the functionality of the system because its functionality is considered seperately
4)debugging a structured program is difficult and time consuming process.since data is shared over the entire program,different functions may be accessing it.to exactly find which function is causing the error is not easy.
====================================================================================






==>Structure is collection of  heterogenous datatype. structure allows us to store different types of variables at one place under one name.due to structure ,it is very easy to construct object oriented programming.
In oop will going to use class but that class derived/extension of c structure.

==>we can able to declared both primitive and derived datatype at one place using structure.
ex:
If we want to store student related data at one place ..
 struct stu
{
	int id; //primitaive
	int marks[6];//derived;
};
int main()
{
struct stu s1,s2;//structure variable stored on stack.
}
structure is constructed based on the user requirement  thats  why structure is called as user defined datatyes...
here  s1 stores one student data which is called as 1 object in C++ ,thats why it is called as object oriented .

*******************************disadvantage with structure************************************************
==>In c lang, structure data is by default public.structure can be accessed from anywhere within the program. 
now to avoid this they have introduced class.

============================================================================================
==>In c++ also, we are having structure.
==>In C ,inside the structure we can declare only variables(member structure) . while in C++,we can declare member structure as well asmember function.
==>In c++ also, structure data is public.that means anyone can access data from anywhere,which is not secured.
that why they have introduced class in c++.
========================================================================================
Difference between Structure in C++ and Class in C++ 

1)In c++ structure, by default all the members of structure is public, whereas class data is private. 
2)using c++ structure ,we cannot define complex programs.But it is possible with the class concepts.
3)class uses the concept of inheritance but structure in c++ never uses the concept of inheritance

====================================================================================
class student
{
private/protected/public:   
datamembers;
private/protected/public:  
memberfunctions;
};

Ex:
In a class, several students are there,every student is having its own data.one student data doesnt belong to another student data.
one student data can be stored in 1 object. 1 object represents 1 student data.

Syntax to create object:
classname objectname;
stu1 obj;
id ,name,fees----->attributes
To access this variables/attributes we have to use function,this function is able to access only student1 data

stu2 obj
id ,name,fees----->attributes,to access this variables we have to use function,this function is able to access only student2 data
i.e  data is seperated into no of blocks called object called as object1,object2.
That means object1 contains first student data,object2 contains 2nd student data.
total program is divided into several objects. thats why c++ is called as object oriented programming structure.
In oop's they bind variable and function in single unit called as object. ===================================================================================
Example:
class student
{
	int id;//data members/attributes/instance variable
	public:
		void get()//member function
		{
			cout<<id;
		}
};
get() is the member of the class thats why it is called as member function.
with the help of member function of a class we can access private data of a class.this data cannot be accessible from outside the class called as data hiding. data hiding mostly achieve using private access specifier.
data hiding means insulating the data from external access. outsiders cannot access the data.only member function can access the data. 

**class is a collection of data members and member function both are associated together into a single unit called as class is called encapsulation.encapsulation is a process of binding the data and member function together into a single unit  called class.

**class provides both data hiding and encapsulation

============================================================================================= 
OBJECT

==>In structure,structure variable should be created to access the structure members.
==>In class,class variables are called as object should be created to access the class members.

class stu
{
};
stu s;//object  (memory allocation takes place)
==> object s is created from this class stu, that why  class is called as blueprint(original copy) to construct the object(xerox copy). thats why to create object we need class,thats  why class is a blueprint and object is the instance of the class.

==>object is the physical representation of a class.when object is created then only memory allocation takes place. class never allocates memory i.e logical representation.
==================================================
Difference between C structure and C ++ structure

1)collection of variables                    		 collection of variables and function
2)structure members are public       		structure members can be private,protected,public									                                                                  
----------------------------------------------------------------------------------------------------------------------------------------
similarities between  C++ structure and class
1)userdefined                          					  userdefined
2)collection of variables & functions   		collection of variables & functions
3)members are private,protected,public		members are private,protected,public																											
-------------------------------------------------------------------------------------------------------------------------------------------		
Differences between  C++ structure and class
1)by default members are public 		by default members	are private
2) structure cannot be inherited			class can be inherited
3)used to build simple program			uses to build complex program,big project

============================================================================
class:
1)it is a userdefined datatypes because we r constructing a class based on primitive and derived datatype as per user requriment.
2)collection of datamembers and member functions
3)it is a container because it contains members.
4)class provides the concept of encapsulation(binding of data members and member function in a single unit),and also provides the concept of data hiding with private access specifier.
5)class is a blueprint to constructs the objects i.e it is a plan before constructing objectts
paper plan(class)--------->  real building(object)
6)class is a logical copy to create objects thats why class never occupies memory.

syntax:
class classname//class is keyword
{
access specifier://it specifies how it is going to access in our program
datamember;
member function;
};


Note:
 Whenever datamembers and member functions are private, they cannot be accessed directly using objects.
#include<iostream>
using namespace std;
class A
{
	int a;
	void get()
	{
		a=100;
		cout<<a;//allowed
	}//private data can be accessed within member function of same class
};
int main()
{
	A obj;
	//obj.a=100;//not allowed whenever datamembers and member functions are private cannot be accessed directly using objects.
	//obj.get();//not allowed whenever datamembers and member functions are private cannot be accessed directly using objects.
 } 
======================================================================
#include<iostream>
using namespace std;
class A
{
 	int a; 
	public:
	 void get()
	{
		a=100;
		cout<<a;//allowed
	}
};
int main()
{
	A obj;
	obj.get();
} 


Therefore it is better to declare data as private and function to access that data outside the class as public
=======================================================================================
Note:
Function can be defined inside the class as well as outside the class.If function is defined outside the class we should use ::(scope resolution )operator.


=========================================================================
OBJECT
To access class members,we should define objects because when class is declared memory is not allocated,when object is defined then only memory is allocated.

ex:student stu;
stu.get();
stu.put();
thru object we can access class members...

==========================================================================
Difference between procedural programming and object-oriented programming

1)In procedural programming, the program is divided into small parts called functions.	
In object-oriented programming, the program is divided into small parts called objects.

2)It is less secure than OOPs. 
Data hiding is possible in object-oriented programming . So, it is more secure than procedural programming.

3)There is no access specifier in procedural programming.
  Object-oriented programming has access specifiers like private, public, protected, etc.

4)In procedural programming, data moves freely within the system from one function to another.	
In OOP, objects can move and communicate with each other via member functions.

5)There is no code reusability present in procedural programming.
	It offers code reusability by using the feature of inheritance.
===============================================================================================
C++ Features

Popular
C++ can be the base language for many other programming languages that supports the feature of object-oriented programming. 

 Compiler based
C++ is a compiler-based programming language, First, we need to compile our program using a compiler, and then we can execute our program.

Platform Dependent ?
The code which can only be run on same platform on which it was compiled. Compiled code cannot run on any other platforms.such language is called as platform dependent .
ex: C,C++
Here, same machine code which is compiled on windows,cannot be run on Linux or MAC OS.

Object-Oriented
In C++, object-oriented concepts like data hiding, encapsulation, and data abstraction can easily be implemented  Object-oriented makes development and maintenance easier.

====================================================================
Difference between C and C++

C was developed by Dennis Ritchie between the year 1969 and 1973 at AT&T Bell Labs.	
C++ was developed by Bjarne Stroustrup in 1979.

C does no support polymorphism, encapsulation, and inheritance which means that C does not support object oriented programming.	
C++ supports polymorphism, encapsulation, and inheritance because it is an object oriented programming language.

C supports procedural programming.	 
C++ supports object oriented programming paradigms.

Data and functions are separated in C because it is a procedural programming language.	
Data and functions are encapsulated together in form of an object in C++.

C does not support data hiding so not secured.	
C++ supports data hiding with the help of private access specifier,secured.

Functions in C are not defined inside structures.	
Functions can be used inside a structure in C++.

C does not support inheritance.	
C++ supports inheritance.

Direct support for exception handling is not supported by C.	
Exception handling is supported by C++.

scanf() and printf() functions are used for input/output in C.	
cin and cout are used for input/output in C++.

C structures don’t have access modifiers.	
C ++ structures have access modifiers.
  
========================================================================
#include<iostream>
using namespace std;
class Cdate
{
	int dd,mm,yy;
	public:
		void accept()
		{
			cout<<"accept today's date"<<endl;
			cin>>dd>>mm>>yy;
		}
		void display()
		{
			cout<<"display today's date\n";
			cout<<dd<<"/"<<mm<<"/"<<yy<<endl;
		}
};
int main()
{
	Cdate d1;
	cout<<"size of object is "<<sizeof(d1)<<endl;
	cout<<"size of class cdate is "<<sizeof(class Cdate)<<endl;
	d1.accept();
	d1.display();
	

	
}
=========================================================
#include<iostream>
using namespace std;
class Cdate
{
	int day,month,year;
	public:
		void accept()
		{
			cout<<"accept today's date"<<endl;
			cin>>day>>month>>year;
		}
		void display()
		{
			cout<<"display date\n";
			cout<<day<<"/"<<month<<"/"<<year<<endl;
		}
		void setDay(int dd)
		{
			day=dd;
		}
	int	getDay()
		{
			return day;
		}
		
};
int main()
{
	Cdate d1;
	cout<<"size of object is "<<sizeof(d1)<<endl;
	cout<<"size of class cdate is "<<sizeof(class Cdate)<<endl;
	d1.accept();
	d1.display();
	d1.setDay(26);
	d1.display();
/*	int dd=d1.getDay();
	cout<<"day part is "<<dd<<endl;*/
	cout<<"day part is "<<d1.getDay();
	
	

	
}
=======================================================
#include<iostream>
using namespace std;
class Complex
{
	int real,img;
	public:
		void accept()
		{
			cout<<"enter real and img\n";
			cin>>real>>img;
		
		}
		void display()
		{
			cout<<"complex no is "<<real<<"+"<<img<<"i"<<endl;
		}
		void setReal(int r)
		{
			real=r;
		}
		int	getReal()
		{
			return real;
		}
		
};
int main()
{
	
	Complex c1;
//	c1.real=100;-------->error
	c1.accept();
	c1.display();
	c1.setReal(10);
	c1.display();
	cout<<"complex no is "<<c1.getReal();
}




===========================================================================

#include <iostream>  
using namespace std;  
#include<string.h>
class Student
{
	int rollno;
	char name[10];
	public:
		void display(int r,char* ptr)
		{
			rollno=r;
			//name=ptr;----------->error
			strcpy(name,ptr);
			cout<<r<<endl;
			cout<<name;
		}
};

int main()
{
	Student s1;
	s1.display(101,"rahul");
}
===================================
Boolean: Boolean data type is used for storing Boolean or logical values. A Boolean variable can store either true or false. The keyword used for the Boolean data type is bool. 
Note: There is no format specifier for bool types. 

// C Program to implement Boolean data type
#include<iostream>
using namespace std;
int main()
{
      // Boolean data types declared
    bool a = true;
    bool b = false;
    printf("True : %d\n", a);
    printf("False : %d\n", b);
    cout<<a;
    cout<<b;
}
===========================================================================================
Header files available in C++ for Input/Output operations are: 
iostream: iostream stands for standard input-output stream. This header file contains definitions of objects like cin, cout.

Standard output stream (cout): Usually the standard output device is the display screen. cout is the instance of the ostream class.
 It is used to produce output on the standard output device which is usually the display screen. The data needed to be displayed on the screen is inserted in the standard output stream (cout) using the insertion operator(<<).
==>ostream class availabe in iostream.h ,thats why we have to include this headerfile

standard input stream (cin): Usually the input device in a computer is the keyboard. C++ cin is the instance of the class istream and is used to read input from the standard input device which is usually a keyboard. 
The extraction operator(>>) is used along with the object cin for reading inputs. The extraction operator extracts the data which is accepted using the keyboard and store the data in the variable.

=================================================================================================
Constants:

  const keywords is used to define the constant value that cannot change during program execution. It means once we declare a variable as the constant in a program, the variable's value will be fixed and never be changed. If we try to change the value of the const type variable, it shows an error message in the program.

1. Const variable
It is a const variable used to define the variable values that never be changed during the execution of a program. And if we try to modify the value, it throws an error.

Syntax
const data_type variable_name=value;   

Let's create a program to demonstrate the use of the const keyword in the C++ programming language.

#include <iostream>   
using namespace std;  
int main ()  
{  
// declare the value of the const  
const int num = 25;  
num = num + 10;  
return 0;  
}  
Note:Constants cannot appear on LHS of assignment operator(=)

========================================================================
1) Constant pointer to an integer

#include<iostream>
using namespace std;
int main()
{
       int x=10,y=20;
      int * const ptr=&x;
    // ptr=&y;//error because ptr is constant
   *ptr=200;
}


2. Pointer to a constant integer
#include <iostream>  
using namespace std;  
int main ()  
{  

	int x = 10, y = 20;  
	const int* ptr = &x; 
  	ptr = &y; 
  	cout << ptr<< endl; 
  	ptr=&x;
  	cout << ptr<< endl; 
	//*ptr = 15; 
	//x=15;//allowed,thru pointer we cant change the value
	cout << " The value of ptr: " << *ptr << endl;  

}   

3)Constant pointer to a Constant Integer

#include <iostream>  
using namespace std;  
int main ()  
{  

	 int x = 10, y = 20;  
	const int *const ptr=&x;
		//ptr = &y; ---------->error
  	//*ptr = 15; ------------>error
	x=15;//allowed,thru pointer we cant change the value
	cout << " The value of ptr: " << *ptr << endl;  

}  
===================================================================================